name: Build Kivy APK

on:
  push:
    branches: [ main, master ] # Adjust branch name if needed
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9' # Using Python 3.9

    # Cache Buildozer global directory (Good practice)
    - name: Cache Buildozer global directory
      uses: actions/cache@v3
      with:
        path: ~/.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-

    # Install basic system dependencies + JDK (Keep this)
    - name: Install system dependencies and JDK
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          git \
          zip \
          unzip \
          build-essential \
          autoconf \
          automake \
          libtool \
          pkg-config \
          libffi-dev \
          libssl-dev \
          liblzma-dev \
          zlib1g-dev \
          python3-pip \
          python3-dev \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          libgl1-mesa-dev \
          libgles2-mesa-dev \
          openjdk-17-jdk # Ensure JDK 17 is installed
        # Clean apt cache to save space
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/*

    # --- NEW: Install Android SDK Command-line Tools ---
    - name: Install Android SDK Command-line Tools
      env:
        # Choose the command line tools version (check official Android site for latest if needed)
        CMDLINE_TOOLS_VERSION: "11076708" # Example version, update if necessary
        # Define where to install the SDK
        ANDROID_SDK_ROOT: "${{ github.workspace }}/android-sdk"
      run: |
        echo "Downloading Android SDK command-line tools..."
        mkdir -p $ANDROID_SDK_ROOT
        wget -q "https://dl.google.com/android/repository/commandlinetools-linux-${CMDLINE_TOOLS_VERSION}_latest.zip" -O cmdline-tools.zip
        unzip -q cmdline-tools.zip -d $ANDROID_SDK_ROOT/cmdline-tools
        # The tools initially land in cmdline-tools/cmdline-tools, we need to move them up
        mv $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools $ANDROID_SDK_ROOT/latest
        mv $ANDROID_SDK_ROOT/latest $ANDROID_SDK_ROOT/cmdline-tools # Correct structure
        rm cmdline-tools.zip
        # Add SDK paths to environment for subsequent steps
        echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}" >> $GITHUB_ENV
        echo "PATH=${PATH}:${ANDROID_SDK_ROOT}/cmdline-tools/bin:${ANDROID_SDK_ROOT}/platform-tools" >> $GITHUB_ENV
        echo "Android SDK installed at ${ANDROID_SDK_ROOT}"
        ls -l $ANDROID_SDK_ROOT/cmdline-tools/bin # Verify sdkmanager exists

    # --- NEW: Install Android SDK Platforms, Build-Tools, and NDK ---
    - name: Install Android SDK components and NDK
      env:
        # --- IMPORTANT: Adjust these versions based on your buildozer.spec ---
        ANDROID_PLATFORM_VERSION: "34"        # Match 'android.api' in buildozer.spec
        ANDROID_BUILD_TOOLS_VERSION: "34.0.0" # Match 'android.build_tools_version' or use a recent one
        ANDROID_NDK_VERSION: "25.2.9519653"   # Match 'android.ndk_version' or a compatible one (check Buildozer docs)
      run: |
        echo "Installing Android SDK platform-tools, platforms, build-tools, and NDK..."
        echo "Using ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
        echo "Listing available packages (optional)..."
        # sdkmanager --list || echo "Listing failed, continuing..." # Can be very verbose
        echo "Accepting licenses..."
        yes | sdkmanager --licenses > /dev/null || echo "Failed to accept licenses. Check SDK setup." # Suppress verbose license output
        echo "Installing components..."
        sdkmanager "platform-tools" "platforms;android-${ANDROID_PLATFORM_VERSION}" "build-tools;${ANDROID_BUILD_TOOLS_VERSION}" "ndk;${ANDROID_NDK_VERSION}"
        echo "NDK should now be at $ANDROID_SDK_ROOT/ndk/${ANDROID_NDK_VERSION}"
        # Ensure the installed NDK path is also set for Buildozer if needed explicitly
        # Buildozer usually finds it within ANDROID_SDK_ROOT, but setting ANDROID_NDK_HOME is safer
        echo "ANDROID_NDK_HOME=${ANDROID_SDK_ROOT}/ndk/${ANDROID_NDK_VERSION}" >> $GITHUB_ENV
        echo "Verifying NDK installation..."
        ls -l $ANDROID_SDK_ROOT/ndk/ # See installed NDK versions
        ls -l $ANDROID_SDK_ROOT/build-tools/ # See installed build-tools versions
        echo "Verifying aidl..."
        ls -l $ANDROID_SDK_ROOT/build-tools/${ANDROID_BUILD_TOOLS_VERSION}/aidl || echo "aidl still not found!"

    # Install/Upgrade Python dependencies (Buildozer, Cython)
    - name: Install/Upgrade buildozer and cython
      run: |
        pip install --upgrade pip setuptools wheel
        pip install cython # Often required
        pip install --upgrade buildozer # Ensure latest buildozer is used

    # Clean previous build artifacts (Keep this)
    - name: Clean previous build artifacts
      run: |
        echo "Running buildozer clean..."
        buildozer clean || echo "Clean failed or directory didn't exist, continuing..."

    # Build APK with Buildozer (Keep this)
    - name: Build APK with Buildozer
      run: |
        # Use -v for verbose output. Check ANDROID_SDK_ROOT and ANDROID_NDK_HOME are set
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME"
        buildozer -v android debug # Use -v for verbose output

    # Upload APK artifact (Keep this)
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: captcha-app-apk # Consider making this dynamic if needed
        path: bin/*.apk # Path to the generated APK file(s)
